// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WashingtonRedskins.Models;

namespace WashingtonRedskins.Migrations
{
    [DbContext(typeof(WashingtonRedskinsContext))]
    [Migration("20180213082838_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("WashingtonRedskins.Models.Breaks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("breaks");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Departments", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Privileges", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("privileges");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Registrations", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<uint>("DepartmentId")
                     .HasColumnName("department_id");

                    b.Property<uint>("StatusId")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .HasName("FK_registration_department");

                    b.HasIndex("StatusId")
                        .HasName("FK_registration_status");

                    b.HasIndex("UserId")
                        .HasName("FK_registration_user");

                    b.ToTable("registrations");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.RegistrationSummaryDay", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<uint>("DepartmentId")
                        .HasColumnName("department_id");

                    b.Property<int>("Duration")
                        .HasColumnName("duration");

                    b.Property<uint>("StatusId")
                        .HasColumnName("status_id");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .HasName("department_id");

                    b.HasIndex("StatusId")
                        .HasName("status_id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("registration_summary");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.RegistrationSummaryMonth", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<uint>("DepartmentId")
                        .HasColumnName("department_id");

                    b.Property<uint>("Duration")
                        .HasColumnName("duration");

                    b.Property<int>("MonthYear")
                        .HasColumnName("month_year")
                        .HasColumnType("int(11)");

                    b.Property<uint>("StatusId")
                        .HasColumnName("status_id");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .HasName("department_id");

                    b.HasIndex("StatusId")
                        .HasName("status_id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("registration_summary_month");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.RegistrationSummaryWeek", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<uint>("DepartmentId")
                        .HasColumnName("department_id");

                    b.Property<uint>("Duration")
                        .HasColumnName("duration");

                    b.Property<uint>("StatusId")
                        .HasColumnName("status_id");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id");

                    b.Property<uint>("WeekYear")
                        .HasColumnName("week_year");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .HasName("department_id");

                    b.HasIndex("StatusId")
                        .HasName("status_id");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("registration_summary_week");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Statuses", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<sbyte>("IsWork")
                        .HasColumnName("is_work")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UserGroups", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("usergroups");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UserGroupsPrivileges", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<sbyte>("Isallowed")
                        .HasColumnName("isallowed")
                        .HasColumnType("tinyint(4)");

                    b.Property<uint?>("PrivilegeId")
                        .HasColumnName("privilege_id");

                    b.Property<uint?>("UserGroupId")
                        .HasColumnName("usergroup_id");

                    b.HasKey("Id");

                    b.HasIndex("PrivilegeId")
                        .HasName("FK_usergroup_privilege");

                    b.HasIndex("UserGroupId")
                        .HasName("FK_privilege_usergroup");

                    b.ToTable("usergroups_privileges");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Users", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(50);

                    b.Property<int>("CprNr")
                        .HasColumnName("cpr_nr")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<uint?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("department_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasMaxLength(50);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<string>("Postcode")
                        .HasColumnName("postcode")
                        .HasMaxLength(50);

                    b.Property<uint?>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usergroup_id")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .HasName("FK_users_departments");

                    b.HasIndex("Password")
                        .IsUnique()
                        .HasName("email_unique");

                    b.HasIndex("UserGroupId")
                        .HasName("FK_users_usergroups");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UsersVacations", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<uint?>("UserId")
                        .HasColumnName("user_id");

                    b.Property<uint?>("VacationId")
                        .HasColumnName("vacation_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("FK_vacation_user");

                    b.HasIndex("VacationId")
                        .HasName("FK_user_vacation");

                    b.ToTable("users_vacations");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UsersWorkHours", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id");

                    b.Property<uint>("WorkHourId")
                        .HasColumnName("workhour_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("FK_workhour_user");

                    b.HasIndex("WorkHourId")
                        .HasName("FK_user_workhour");

                    b.ToTable("users_workhours");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Vacations", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("End")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("end")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<DateTime>("Start")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.HasKey("Id");

                    b.ToTable("vacations");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.WorkHours", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("int(11)");

                    b.Property<int?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("workhours");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.WorkHoursBreaks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<uint?>("BreakId")
                        .HasColumnName("break_id");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<uint?>("WorkHourId")
                        .HasColumnName("workhour_id");

                    b.HasKey("Id");

                    b.HasIndex("BreakId")
                        .HasName("FK_workhour_breaks");

                    b.HasIndex("WorkHourId")
                        .HasName("FK_break_workhours");

                    b.ToTable("workhours_breaks");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Registrations", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Departments", "Department")
                        .WithMany("Registrations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WashingtonRedskins.Models.Statuses", "Status")
                        .WithMany("Registrations")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_registration_status")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WashingtonRedskins.Models.Users", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_registration_user")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WashingtonRedskins.Models.RegistrationSummaryDay", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Departments", "Department")
                        .WithMany("RegistrationSummaryDay")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_registraion_summary_day_department");

                    b.HasOne("WashingtonRedskins.Models.Statuses", "Status")
                        .WithMany("RegistrationSummaryDay")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_registraion_summary_day_status");

                    b.HasOne("WashingtonRedskins.Models.Users", "User")
                        .WithMany("RegistrationSummaryDay")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_registraion_summary_day_user");
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UserGroupsPrivileges", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Privileges", "Privilege")
                        .WithMany("UserGroupsPrivileges")
                        .HasForeignKey("PrivilegeId")
                        .HasConstraintName("FK_usergroup_privilege")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WashingtonRedskins.Models.UserGroups", "UserGroup")
                        .WithMany("UserGroupsPrivileges")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK_privilege_usergroup")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WashingtonRedskins.Models.Users", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Departments", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_users_departments")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WashingtonRedskins.Models.UserGroups", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK_users_usergroups")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UsersVacations", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Users", "User")
                        .WithMany("UsersVacations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_vacation_user")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WashingtonRedskins.Models.Vacations", "Vacation")
                        .WithMany("UsersVacations")
                        .HasForeignKey("VacationId")
                        .HasConstraintName("FK_user_vacation")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WashingtonRedskins.Models.UsersWorkHours", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Users", "User")
                        .WithMany("UsersWorkHours")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_workhour_user")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WashingtonRedskins.Models.WorkHours", "WorkHour")
                        .WithMany("UsersWorkHours")
                        .HasForeignKey("WorkHourId")
                        .HasConstraintName("FK_user_workhour")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WashingtonRedskins.Models.WorkHoursBreaks", b =>
                {
                    b.HasOne("WashingtonRedskins.Models.Breaks", "Break")
                        .WithMany("WorkHoursBreaks")
                        .HasForeignKey("BreakId")
                        .HasConstraintName("FK_workhour_breaks")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WashingtonRedskins.Models.WorkHours", "WorkHour")
                        .WithMany("WorkHoursBreaks")
                        .HasForeignKey("WorkHourId")
                        .HasConstraintName("FK_break_workhours")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
